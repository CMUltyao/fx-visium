conda activate pyscenic


python

import os
import glob
import pickle
import pandas as pd
import numpy as np

from dask.diagnostics import ProgressBar

from arboreto.utils import load_tf_names
from arboreto.algo import grnboost2

from ctxcore.rnkdb import FeatherRankingDatabase as RankingDatabase
from pyscenic.utils import modules_from_adjacencies, load_motifs
from pyscenic.prune import prune2df, df2regulons
from pyscenic.aucell import aucell

import seaborn as sns


DATA_FOLDER="/Users/ltyao/Cloudstation/SCENIC/mouse_scenic_databases"
RESOURCES_FOLDER="/Users/ltyao/Cloudstation/SCENIC/mouse_scenic_databases"
DATABASE_FOLDER = "/Users/ltyao/Cloudstation/SCENIC/mouse_scenic_databases"

SCHEDULER="123.122.8.24:8786"

DATABASES_GLOB = os.path.join(DATABASE_FOLDER, "mm9-*mc9nr.genes_vs_motifs.rankings.feather") 
MOTIF_ANNOTATIONS_FNAME = os.path.join(RESOURCES_FOLDER, "motifs-v9-nr.mgi-m0.001-o0.0.tbl")
MM_TFS_FNAME = os.path.join(RESOURCES_FOLDER, 'mm_tfs.txt')
SC_EXP_FNAME = os.path.join(RESOURCES_FOLDER, "mouse_synovium.csv")
REGULONS_FNAME = os.path.join(DATA_FOLDER, "regulons.p")
MOTIFS_FNAME = os.path.join(DATA_FOLDER, "motifs.csv")
REGULONS_DAT_FNAME = os.path.join(DATABASE_FOLDER, 'regulons.dat')
AUCELL_MTX_FNAME = os.path.join(DATABASE_FOLDER, 'auc.csv')
ADJACENCIES_FNAME = os.path.join(DATABASE_FOLDER, 'adjacencies.tsv')



ex_matrix = pd.read_csv(SC_EXP_FNAME, sep=',', header=0, index_col=0)
ex_matrix.head()
ex_matrix.shape

tf_names = load_tf_names(MM_TFS_FNAME)

db_fnames = glob.glob(DATABASES_GLOB)
def name(fname):
    return os.path.splitext(os.path.basename(fname))[0]
dbs = [RankingDatabase(fname=fname, name=name(fname)) for fname in db_fnames]
dbs

from distributed import LocalCluster, Client
local_cluster = LocalCluster(n_workers=4, threads_per_worker=1, memory_limit='50GB')
custom_client = Client(local_cluster)

#, client_or_address=custom_client
adjacencies = grnboost2(ex_matrix, tf_names=tf_names, verbose=True)
adjacencies.to_csv(ADJACENCIES_FNAME, sep='\t', index=True, header=True)

modules = list(modules_from_adjacencies(adjacencies, ex_matrix))
with ProgressBar(): 
     df = prune2df(dbs, modules, MOTIF_ANNOTATIONS_FNAME, client_or_address = 'custom_multiprocessing')


regulons = df2regulons(df)
df.to_csv(MOTIFS_FNAME)
with open(REGULONS_FNAME, "wb") as f:
     pickle.dump(regulons, f)

auc_mtx = aucell(ex_matrix, regulons, num_workers=4)
sns.clustermap(auc_mtx, figsize=(8, 8))
auc_mtx.to_csv(AUCELL_MTX_FNAME, sep='\t', index=True, header=True)
